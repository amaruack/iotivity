/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.iotivity;

public class OCCollectionUtil {
  public static void oc_link_set_interfaces(OCLink link, int new_interfaces) {
    OCCollectionUtilJNI.oc_link_set_interfaces(OCLink.getCPtr(link), link, new_interfaces);
  }

  public static boolean handleCollectionRequest(OCMethod method, OCRequest request, int iface_mask, OCResource notify_resource) {
    return OCCollectionUtilJNI.handleCollectionRequest(method.swigValue(), OCRequest.getCPtr(request), request, iface_mask, OCResource.getCPtr(notify_resource), notify_resource);
  }

  public static OCCollection newCollection() {
    long cPtr = OCCollectionUtilJNI.newCollection();
    return (cPtr == 0) ? null : new OCCollection(cPtr, false);
  }

  public static void freeCollection(OCCollection collection) {
    OCCollectionUtilJNI.freeCollection(OCCollection.getCPtr(collection), collection);
  }

  public static OCCollection getNextCollectionWithLink(OCResource resource, OCCollection start) {
    long cPtr = OCCollectionUtilJNI.getNextCollectionWithLink(OCResource.getCPtr(resource), resource, OCCollection.getCPtr(start), start);
    return (cPtr == 0) ? null : new OCCollection(cPtr, false);
  }

  public static OCCollection getCollectionByUri(String uri_path, long uri_path_len, long device) {
    long cPtr = OCCollectionUtilJNI.getCollectionByUri(uri_path, uri_path_len, device);
    return (cPtr == 0) ? null : new OCCollection(cPtr, false);
  }

  public static OCCollection collectionGetAll() {
    long cPtr = OCCollectionUtilJNI.collectionGetAll();
    return (cPtr == 0) ? null : new OCCollection(cPtr, false);
  }

  public static OCLink getLinkByUri(OCCollection collection, String uri_path, int uri_path_len) {
    long cPtr = OCCollectionUtilJNI.getLinkByUri(OCCollection.getCPtr(collection), collection, uri_path, uri_path_len);
    return (cPtr == 0) ? null : new OCLink(cPtr, false);
  }

  public static boolean checkIfCollection(OCResource resource) {
    return OCCollectionUtilJNI.checkIfCollection(OCResource.getCPtr(resource), resource);
  }

  public static void collectionAdd(OCCollection collection) {
    OCCollectionUtilJNI.collectionAdd(OCCollection.getCPtr(collection), collection);
  }

}
