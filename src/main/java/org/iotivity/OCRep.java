/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.iotivity;

public class OCRep implements OCRepConstants {
  /**
   * Release the memory allocated by the call to {@link org.iotivity.OCRep#newBuffer(int)}
   * <p>
   * <strong>NOTE</strong>: memory allocated by the call to newBuffer is not
   * managed by the Java VM failure to call deleteBuffer() will result in a memory leak.
   *
   * @see org.iotivity.OCRep#newBuffer
   */
  public static void deleteBuffer() {
    OCRepJNI.deleteBuffer();
  }

  /**
   * Allocate memory needed hold the OCRepresentation object.
   * <p>
   * <strong>IMPORTANT</strong>: the memory buffer needed to hold the an
   * OCRepresentation object is normally created by the IoTivity-lite framework.
   * It is unlikely that developers will ever need to call this method. Its
   * primary purpose is for testing.
   * <p>
   * <strong>NOTE</strong>: The buffer allocated is a single global buffer
   * multiple calls to this method will only result in deleteing the old buffer
   * and changing its size.  The memory allocated by the calling newBuffer is not
   * managed by the Java VM failure to call {@link  org.iotivity.OCRep#deleteBuffer()} will result
   * in a memory leak.
   *
   * @param size the size in bytes for the allocated buffer
   *
   * @see org.iotivity.OCRep#deleteBuffer()
   * @see org.iotivity.OCRep#getOCRepresentaionFromRootObject()
   */
  public static void newBuffer(int size) {
    OCRepJNI.newBuffer(size);
  }

  /**
   * Add a double value to the cbor object
   * <p>
   * Example:
   * <p>
   * To build the an object with the following cbor value
   * <pre>
   *     {
   *       "pi": 3.14159
   *     }
   * </pre>
   * <p>
   * The following code could be used:
   * <pre>
   *     CborEncoder root = OCRep.beginRootObject();
   *     OCRep.setDouble(root, "pi", 3.14);
   *     OCRep.endRootObject();
   * </pre>
   *
   * @param object the CborEncoder holding the double
   * @param key the name of the double value
   * @param value the double value to add to the cbor object
   */
  public static void setDouble(CborEncoder object, String key, double value) {
    OCRepJNI.setDouble(CborEncoder.getCPtr(object), object, key, value);
  }

  /**
   * Add an integer value to the cbor object
   * <p>
   * Example:
   * <p>
   * To build the an object with the following cbor value
   * <pre>
   *     {
   *       "power": 42
   *     }
   * </pre>
   * <p>
   * The following code could be used:
   * <pre>
   *     CborEncoder root = OCRep.beginRootObject();
   *     OCRep.setLong(root, "power", 42);
   *     OCRep.endRootObject();
   * </pre>
   *
   * @param object the CborEncoder holding the double
   * @param key the name of the long value
   * @param value the long value to add to the cbor object
   *
   * @see org.iotivity.OCRep#getLong(org.iotivity.OCRepresentation, String)
   */
  public static void setLong(CborEncoder object, String key, long value) {
    OCRepJNI.setLong(CborEncoder.getCPtr(object), object, key, value);
  }

  /**
   * Add an unsigned integer value to the cbor object
   * <p>
   * Example:
   * <p>
   * To build the an object with the following cbor value
   * <pre>
   *     {
   *       "power": 42
   *     }
   * </pre>
   * <p>
   * The following code could be used:
   * <pre>
   *     CborEncoder root = OCRep.beginRootObject();
   *     OCRep.setUnsignedInt(root, "power", 42);
   *     OCRep.endRootObject();
   * </pre>
   * <p>
   * <strong>Note</strong>: when the cbor object is converted to an
   * OCRepresentation the data type will be encoded as OCType.OC_REP_INT. There
   * is no way for a client to know that the server sent the integer as an unsigned
   * value.
   *
   * @param object the CborEncoder object being writen too
   * @param key the name of the value
   * @param value the unsigned value to add to the cbor object
   *
   * @see org.iotivity.OCRep#getLong(org.iotivity.OCRepresentation, String)
   */
  public static void setUnsignedInt(CborEncoder object, String key, long value) {
    OCRepJNI.setUnsignedInt(CborEncoder.getCPtr(object), object, key, value);
  }

  /**
   * Add a boolean value to the cbor object
   * <p>
   * Example:
   * <p>
   * To build the an object with the following cbor value
   * <pre>
   *     {
   *       "door_open": false
   *     }
   * </pre>
   * <p>
   * The following code could be used:
   * <pre>
   *     CborEncoder root = OCRep.beginRootObject();
   *     OCRep.setBoolean(root, "door_open", false);
   *     OCRep.endRootObject();
   * </pre>
   *
   * @param object the CborEncoder object the boolean object will be writen too
   * @param key the name of the boolean value
   * @param value the boolean value to add to the cbor object
   *
   * @see org.iotivity.OCRep#getBoolean(org.iotivity.OCRepresentation, String)
   */
  public static void setBoolean(CborEncoder object, String key, boolean value) {
    OCRepJNI.setBoolean(CborEncoder.getCPtr(object), object, key, value);
  }

  /**
   * Add a string value to the cbor object
   * <p>
   * Example:
   * <p>
   * To build the an object with the following cbor value
   * <pre>
   *     {
   *       "greeting": "Hello, world!"
   *     }
   * </pre>
   * <p>
   * The following code could be used:
   * <pre>
   *     CborEncoder root = OCRep.beginRootObject();
   *     OCRep.setTextString(root, "hello", "world");
   *     OCRep.endRootObject();
   * </pre>
   *
   * @param object the CborEncoder object the string value will be writen too
   * @param key the name of the string value
   * @param value the string value to add to the cbor object
   *
   * @see org.iotivity.OCRep#getString(org.iotivity.OCRepresentation, String)
   */
  public static void setTextString(CborEncoder object, String key, String value) {
    OCRepJNI.setTextString(CborEncoder.getCPtr(object), object, key, value);
  }

  public static void setByteString(CborEncoder object, String key, byte[] value) {
    OCRepJNI.setByteString(CborEncoder.getCPtr(object), object, key, value);
  }

  public static CborEncoder beginArray(CborEncoder parent) {
    long cPtr = OCRepJNI.beginArray(CborEncoder.getCPtr(parent), parent);
    return (cPtr == 0) ? null : new CborEncoder(cPtr, false);
  }

  public static void endArray(CborEncoder parent, CborEncoder arrayObject) {
    OCRepJNI.endArray(CborEncoder.getCPtr(parent), parent, CborEncoder.getCPtr(arrayObject), arrayObject);
  }

  public static CborEncoder beginLinksArray() {
    long cPtr = OCRepJNI.beginLinksArray();
    return (cPtr == 0) ? null : new CborEncoder(cPtr, false);
  }

  public static void endLinksArray() {
    OCRepJNI.endLinksArray();
  }

  /**
   * Begin the root CborEncoder object. Items can be added to the root object
   * till {@link org.iotivity.OCRep#endRootObject()} is called
   *
   * @return CborEncoder object representing the root object
   * @see org.iotivity.OCRep#endRootObject()
   */
  public static CborEncoder beginRootObject() {
    long cPtr = OCRepJNI.beginRootObject();
    return (cPtr == 0) ? null : new CborEncoder(cPtr, false);
  }

  /**
   * End the root CborEncoder object. Items can no longer be added to the root
   * object.
   *
   * @see org.iotivity.OCRep#beginRootObject()
   */
  public static void endRootObject() {
    OCRepJNI.endRootObject();
  }

  /**
   * Add a byte string value to a parent arrayObject.
   * <p>
   * Currently the only way to make an array of byte strings is using this method
   * <p>
   * Example:
   * <p>
   * To build the an object with the following cbor value
   * <em>note</em>, base64 encoding used to represent binary array data
   * <pre>
   *     {
   *       "barray": [ "AAECAwQFBg==", "AQECAwUIEyE0VYk=", "AAD/AAA=" ]
   *     }
   * </pre>
   * The following code could be used:
   * <pre>
   *     byte ba0[] = {0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06};
   *     byte ba1[] = {0x01, 0x01, 0x02, 0x03, 0x05, 0x08, 0x13, 0x21, 0x34, 0x55, (byte)0x89};
   *     byte ba2[] = {0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
   *                      0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42};
   *     byte ba3[] = {0x00, 0x00, (byte)0xff, 0x00, 0x00};
   *
   *     CborEncoder barray = OCRep.openArray(root, "barray");
   *     OCRep.addByteString(barray, ba0);
   *     OCRep.addByteString(barray, ba1);
   *     OCRep.addByteString(barray, ba2);
   *     OCRep.addByteString(barray, ba3);
   *     OCRep.closeArray(root, barray);
   *     OCRep.endRootObject();
   * </pre>
   *
   * @param arrayObject CborEncoder object already setup to hold an array using {@link org.iotivity.OCRep#openArray(org.iotivity.CborEncoder, String)}
   * @param value a byte array to add to the CborEncoder object
   *
   * @see org.iotivity.OCRep#openArray(org.iotivity.CborEncoder, String)
   * @see org.iotivity.OCRep#closeArray(org.iotivity.CborEncoder, org.iotivity.CborEncoder)
   */
  public static void addByteString(CborEncoder arrayObject, byte[] value) {
    OCRepJNI.addByteString(CborEncoder.getCPtr(arrayObject), arrayObject, value);
  }

  /**
   * Add a text string value to a parent array object.
   * <p>
   * <strong>NOTE</strong>: This method can be used to add separate strings to
   * a cbor array object. If the strings are already in an array the
   * {@link org.iotivity.OCRep#setStringArray(org.iotivity.CborEncoder, String, String[])} method can be
   * used instead.
   * <p>
   * Example:
   * <p>
   * To build the an object with the following cbor value
   * <pre>
   *     {
   *       "quotes": [
   *       "Do not take life too seriously. You will never get out of it alive.",
   *       "All generalizations are false, including this one.",
   *       "Those who believe in telekinetics, raise my hand.",
   *       "I refuse to join any club that would have me as a member."
   *       ]
   *     }
   * </pre>
   *
   * The following code could be used:
   * <pre>
   *     String quote0 = "Do not take life too seriously. You will never get out of it alive.";
   *     String quote1 = "All generalizations are false, including this one.";
   *     String quote2 = "Those who believe in telekinetics, raise my hand.";
   *     String quote3 = "I refuse to join any club that would have me as a member.";
   *
   *     CborEncoder quotes = OCRep.openArray(root, "quotes");
   *     OCRep.addByteString(quotes, quote0);
   *     OCRep.addByteString(quotes, quote1);
   *     OCRep.addByteString(quotes, quote2);
   *     OCRep.addByteString(quotes, quote3);
   *     OCRep.closeArray(root, quotes);
   *     OCRep.endRootObject();
   * </pre>
   * 
   * @param arrayObject CborEncoder object already setup to hold an array using {@link org.iotivity.OCRep#openArray(org.iotivity.CborEncoder, String)}
   * @param value a string to add to the CborEncoder object
   * 
   * @see org.iotivity.OCRep#openArray(org.iotivity.CborEncoder, String)
   * @see org.iotivity.OCRep#closeArray(org.iotivity.CborEncoder, org.iotivity.CborEncoder)
   */
  public static void addTextString(CborEncoder arrayObject, String value) {
    OCRepJNI.addTextString(CborEncoder.getCPtr(arrayObject), arrayObject, value);
  }

  /**
   * Add a double value to a parent array object.
   * <p>
   * <strong>NOTE</strong>: This method can be used to add separate double value to
   * a cbor array object. If the numbers are already in an array the
   * {@link org.iotivity.OCRep#setDoubleArray(org.iotivity.CborEncoder, String, double[])} method should be
   * used instead.
   * <p>
   * See {@link org.iotivity.OCRep#addTextString(org.iotivity.CborEncoder, String)} for an example similar to this method.
   *
   * @param arrayObject CborEncoder object already setup to hold an array using {@link org.iotivity.OCRep#openArray(org.iotivity.CborEncoder, String)}
   * @param value a double number to add to the CborEncoder array object
   * 
   * @see org.iotivity.OCRep#openArray(org.iotivity.CborEncoder, String)
   * @see org.iotivity.OCRep#closeArray(org.iotivity.CborEncoder, org.iotivity.CborEncoder)
   */
  public static void addDouble(CborEncoder arrayObject, double value) {
    OCRepJNI.addDouble(CborEncoder.getCPtr(arrayObject), arrayObject, value);
  }

  /**
   * Add a long value to a parent array object.
   * <p>
   * <strong>NOTE</strong>: This method can be used to add separate long value to
   * a cbor array object. If the numbers are already in an array the
   * {@link org.iotivity.OCRep#setLongArray(org.iotivity.CborEncoder, String, long[])} method should be
   * used instead.
   * <p>
   * See {@link org.iotivity.OCRep#addTextString(org.iotivity.CborEncoder, String)} for an example similar to this method.
   *
   * @param arrayObject CborEncoder object already setup to hold an array using {@link org.iotivity.OCRep#openArray(org.iotivity.CborEncoder, String)}
   * @param value a long number to add to the CborEncoder array object
   *
   * @see org.iotivity.OCRep#openArray(org.iotivity.CborEncoder, String)
   * @see org.iotivity.OCRep#closeArray(org.iotivity.CborEncoder, org.iotivity.CborEncoder)
   */
  public static void addLong(CborEncoder arrayObject, long value) {
    OCRepJNI.addLong(CborEncoder.getCPtr(arrayObject), arrayObject, value);
  }

  /**
   * Add a boolean value to a parent array object.
   * <p>
   * <strong>NOTE</strong>: This method can be used to add separate boolean value to
   * a cbor array object. If the boolean values are already in an array the
   * {@link org.iotivity.OCRep#setBooleanArray(org.iotivity.CborEncoder, String, boolean[])} method should be
   * used instead.
   * <p>
   * See {@link org.iotivity.OCRep#addTextString(org.iotivity.CborEncoder, String)} for an example similar to this method.
   *
   * @param arrayObject CborEncoder object already setup to hold an array using {@link org.iotivity.OCRep#openArray(org.iotivity.CborEncoder, String)}
   * @param value a boolean value to add to the CborEncoder array object
   *
   * @see org.iotivity.OCRep#openArray(org.iotivity.CborEncoder, String)
   * @see org.iotivity.OCRep#closeArray(org.iotivity.CborEncoder, org.iotivity.CborEncoder)
   */
  public static void addBoolean(CborEncoder arrayObject, boolean value) {
    OCRepJNI.addBoolean(CborEncoder.getCPtr(arrayObject), arrayObject, value);
  }

  public static void setKey(CborEncoder parent, String key) {
    OCRepJNI.setKey(CborEncoder.getCPtr(parent), parent, key);
  }

  /**
   * Open a cbor array object belonging to the parent CborEncoder object.
   * <p>
   * Items can be added to the array object till closeArray is called.
   * <p>
   * Most common array types such as <tt>long</tt>, <tt>bool</tt>, <tt>double</tt>
   * and <tt>strings</tt> have specific macros for handling those array types.
   * This method will mostly be used to make arrays where the length is unknown
   * ahead of time or to make an array of other objects.
   *
   * For and example of this method being used see:
   * <ul>
   * <li>{@link org.iotivity.OCRep#addTextString(org.iotivity.CborEncoder, String)}</li>
   * <li>{@link org.iotivity.OCRep#addByteString(org.iotivity.CborEncoder, byte[])}</li>
   * <li>{@link org.iotivity.OCRep#objectArrayBeginItem(org.iotivity.CborEncoder)}</li>
   * </ul>
   *
   * @param parent the CborEncoder object that will hold the array object
   * @param key the name of the array object
   *
   * @return the CborEncoder representing the array object
   *
   * @see org.iotivity.OCRep#closeArray(org.iotivity.CborEncoder, org.iotivity.CborEncoder)
   */
  public static CborEncoder openArray(CborEncoder parent, String key) {
    long cPtr = OCRepJNI.openArray(CborEncoder.getCPtr(parent), parent, key);
    return (cPtr == 0) ? null : new CborEncoder(cPtr, false);
  }

  /**
   * Close the array object.
   * <p>
   * No additional items can be added to the array after this is called.
   *
   * @param object the parent CborEncoder object same object passed in {@link org.iotivity.OCRep#openArray(org.iotivity.CborEncoder, String)}
   * @param arrayObject the array object returned from {@link org.iotivity.OCRep#openArray(org.iotivity.CborEncoder, String)}
   *
   * @see org.iotivity.OCRep#openArray(org.iotivity.CborEncoder, String)
   */
  public static void closeArray(CborEncoder object, CborEncoder arrayObject) {
    OCRepJNI.closeArray(CborEncoder.getCPtr(object), object, CborEncoder.getCPtr(arrayObject), arrayObject);
  }

  public static CborEncoder beginObject(CborEncoder parent) {
    long cPtr = OCRepJNI.beginObject(CborEncoder.getCPtr(parent), parent);
    return (cPtr == 0) ? null : new CborEncoder(cPtr, false);
  }

  public static void endObject(CborEncoder parent, CborEncoder object) {
    OCRepJNI.endObject(CborEncoder.getCPtr(parent), parent, CborEncoder.getCPtr(object), object);
  }

  /**
   * Begin a cbor object for an array of cbor objects.
   * <p>
   * <strong>NOTE</strong> Object Array is a misnomer, it is represented in
   * code as a linked list of OCRepresentation objects, it has the same
   * limitations as a singly-linked-list.
   * <p>
   * Example:
   * <p>
   * To build the an object with the following cbor value
   * <pre>
   *     {
   *       "space2001": [
   *                     {"name": "Dave Bowman", "job": "astronaut"},
   *                     {"name": "Frank Poole", "job": "astronaut"},
   *                     {"name": "Hal 9000", "job": "AI computer"}
   *                     ]
   *     }
   * </pre>
   * The following code could be used:
   * <pre>
   *     CborEncoder root = OCRep.beginRootObject();
   *     CborEncoder space2001 = OCRep.openArray(root, "space_2001");
   *
   *     CborEncoder arrayItemObject;
   *
   *     arrayItemObject = OCRep.objectArrayBeginItem(space2001);
   *     OCRep.setTextString(arrayItemObject, "name", "Dave Bowman");
   *     OCRep.setTextString(arrayItemObject, "job", "astronaut");
   *     OCRep.objectArrayEndItem(space2001, arrayItemObject);
   *
   *     arrayItemObject = OCRep.objectArrayBeginItem(space2001);
   *     OCRep.setTextString(arrayItemObject, "name", "Frank Poole");
   *     OCRep.setTextString(arrayItemObject, "job", "astronaut");
   *     OCRep.objectArrayEndItem(space2001, arrayItemObject);
   *
   *     arrayItemObject = OCRep.objectArrayBeginItem(space2001);
   *     OCRep.setTextString(arrayItemObject, "name", "Hal 9000");
   *     OCRep.setTextString(arrayItemObject, "job", "AI computer");
   *     OCRep.objectArrayEndItem(space2001, arrayItemObject);
   *
   *     OCRep.closeArray(root, space2001);
   *     OCRep.endRootObject();
   * </pre>
   *
   * @param arrayObject a CborEncoder object returned from
   *                    {@link org.iotivity.OCRep#openArray(org.iotivity.CborEncoder, String)}
   *
   * @return CborEncoder object that can be added to till
   *         {@link org.iotivity.OCRep#objectArrayEndItem(org.iotivity.CborEncoder, org.iotivity.CborEncoder)} is
   *         called
   *
   * @see org.iotivity.OCRep#openArray(org.iotivity.CborEncoder, String)
   * @see org.iotivity.OCRep#closeArray(org.iotivity.CborEncoder, org.iotivity.CborEncoder)
   * @see org.iotivity.OCRep#objectArrayEndItem(org.iotivity.CborEncoder, org.iotivity.CborEncoder)
   */
  public static CborEncoder objectArrayBeginItem(CborEncoder arrayObject) {
    long cPtr = OCRepJNI.objectArrayBeginItem(CborEncoder.getCPtr(arrayObject), arrayObject);
    return (cPtr == 0) ? null : new CborEncoder(cPtr, false);
  }

  /**
   * End the cbor object for the array of cbor objects.
   * <p>
   * See {@link org.iotivity.OCRep#objectArrayBeginItem(org.iotivity.CborEncoder)} for a sample code
   * showing how to use this function
   * 
   * @param parentArrayObject a CborEncoder array object created using
   *                          {@link org.iotivity.OCRep#openArray(org.iotivity.CborEncoder, String)}
   * @param arrayObject the object array item being ended
   */
  public static void objectArrayEndItem(CborEncoder parentArrayObject, CborEncoder arrayObject) {
    OCRepJNI.objectArrayEndItem(CborEncoder.getCPtr(parentArrayObject), parentArrayObject, CborEncoder.getCPtr(arrayObject), arrayObject);
  }

    /**
   * Open a cbor object belonging to parent cbor object.
   * <p>
   * Items can then be added to the object till
   * {@link org.iotivity.OCRep#closeObject(org.iotivity.CborEncoder, org.iotivity.CborEncoder)} is called.
   * <p>
   * Example:
   * <p>
   * To build the an object with the following cbor value
   * <pre>
   *     {
   *         "my_object": {
   *             "a": 1
   *             "b": false
   *             "c": "three"
   *         }
   *     }
   * </pre>
   * The following code could be used:
   * <pre>
   *     CborEncoder root = OCRep.beginRootObject();
   *     CborEncoder myObject = OCRep.openObject(root, "my_object");
   *     OCRep.setLong(myObject, "a", 1);
   *     OCRep.setBoolean(myObject, "b", false);
   *     OCRep.setTextString(myObject, "c", "three");
   *     OCRep.closeObject(root, myObject);
   *     OCRep.endRootObject();
   * </pre>
   *
   * @param parent the parent CborEncoder object
   * @param key the name of the CborEncoder object being opened
   *
   * @return the CborEncoder object to be filled
   *
   * @see org.iotivity.OCRep#closeObject(org.iotivity.CborEncoder, org.iotivity.CborEncoder)
   */
  public static CborEncoder openObject(CborEncoder parent, String key) {
    long cPtr = OCRepJNI.openObject(CborEncoder.getCPtr(parent), parent, key);
    return (cPtr == 0) ? null : new CborEncoder(cPtr, false);
  }

  /**
   * Close the object.
   * <p>
   * No additional items can be added to the object after this is called.
   * 
   * @param parent the parent cbor object
   * @param object the object being closed
   * 
   * @see org.iotivity.OCRep#openObject(org.iotivity.CborEncoder, String)
   */
  public static void closeObject(CborEncoder parent, CborEncoder object) {
    OCRepJNI.closeObject(CborEncoder.getCPtr(parent), parent, CborEncoder.getCPtr(object), object);
  }

  /**
   * Add a integer (Long) array to the cbor object.
   * <p>
   * Example:
   * <p>
   * To build an object with the following cbor value
   * <pre>
   *     {
   *       "fibonacci": [ 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89 ]
   *     }
   * </pre>
   * The following code could be used:
   *<pre>
   *    long fib[] = {1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89};
   *    CborEncoder root = OCRep.beginRootObject();
   *    OCRep.setLongArray(root, "fibonacci", fib);
   *    OCRep.endRootObject();
   * </pre>
   * @param object the cbor object the array belongs to
   * @param key the name of the long array
   * @param values an array of long integers
   */
  public static void setLongArray(CborEncoder object, String key, long[] values) {
    OCRepJNI.setLongArray(CborEncoder.getCPtr(object), object, key, values);
  }

  /**
   * Add a boolean array to the cbor object.
   * <p>
   * Example:
   * <p>
   * To build an object with the following cbor value
   * <pre>
   *     {
   *       "flip": [ false, false, true, false, false ]
   *     }
   * </pre>
   * The following code could be used:
   * <pre>
   *     boolean flip[] = {false, false, true, false, false };
   *     CborEncoder root = OCRep.beginRootObject();
   *     OCRep.setBooleanArray(root, "flip", flip)
   *     OCRep.endRootObject();
   * </pre>
   *
   * @param object the cbor object the array belongs to
   * @param key the name of the boolean array
   * @param values an array of boolean integers
   */
  public static void setBooleanArray(CborEncoder object, String key, boolean[] values) {
    OCRepJNI.setBooleanArray(CborEncoder.getCPtr(object), object, key, values);
  }

  /**
   * Add a double array to the cbor object.
   * <p>
   * Example:
   * <p>
   * To build the an object with the following cbor value
   * <pre>
   *     {
   *       "math_constants": [ 3.14159, 2.71828, 1.414121, 1.61803 ]
   *     }
   * </pre>
   * The following code could be used:
   * <pre>
   *     double math_constants[] = { 3.14159, 2.71828, 1.414121, 1.61803 };
   *     CborEncoder root = OCRep.beginRootObject();
   *     OCRep.setDoubleArray(root, "math_constants", mathConstants);
   *     OCRep.endRootObject();
   * </pre>
   *
   * @param object the cbor object the array belongs to
   * @param key the name of the boolean array
   * @param values an array of boolean integers
   */
  public static void setDoubleArray(CborEncoder object, String key, double[] values) {
    OCRepJNI.setDoubleArray(CborEncoder.getCPtr(object), object, key, values);
  }

  /**
   * Add a string array to the cbor object
   * <p>
   * Example:
   * <p>
   * To build the an object with the following cbor value
   * <pre>
   *     {
   *       "lorem_ipsum" : ["Lorem", "ipsum", "dolor", "sit", "amet",
   *                        "consectetur", "adipiscing", "elit.", "Sed",
   *                        "nec", "feugiat", "odio.", "Donec."]
   *     }
   * </pre>
   * The following code could be used:
   * <pre>
   *     String lorem_ipsum[] = {"Lorem", "ipsum", "dolor", "sit", "amet",
   *                             "consectetur", "adipiscing", "elit.", "Sed",
   *                             "nec", "feugiat", "odio.", "Donec."};
   *     CborEncoder root = OCRep.beginRootObject();
   *     OCRep.setStringArray(root, "lorem_ipsum", lorem_ipsum);
   *     OCRep.endRootObject();
   * </pre>
   *
   * @param object the cbor object the array belongs to
   * @param key the name of the string array
   * @param values an array of strings
   */
  public static void setStringArray(CborEncoder object, String key, String[] values) {
    OCRepJNI.setStringArray(CborEncoder.getCPtr(object), object, key, values);
  }

  /**
   * Convert the internal <tt>root</tt> CborEncoder object to an OCRepresentation object
   * <p>
   * This method should only be called after calling {@link org.iotivity.OCRep#endRootObject()}
   * <p>
   * <strong>NOTE</strong>: This method is not expected to be used in typically
   * use cases.  This method is almost exclusively intended for unit testing code.
   *
   * @return an OCRepresentation object converted from the internal root CborEncoder object
   *
   * @see org.iotivity.OCRep#newBuffer(int)
   * @see org.iotivity.OCRep#deleteBuffer()
   */
  public static OCRepresentation getOCRepresentaionFromRootObject() {
    long cPtr = OCRepJNI.getOCRepresentaionFromRootObject();
    return (cPtr == 0) ? null : new OCRepresentation(cPtr, true);
  }

    /**
   * Called after any <tt>set*</tt>, <tt>start*</tt>, <tt>begin*</tt>,
   * <tt>end*</tt>, <tt>add*</tt>, <tt>open*</tt>, and <tt>close*</tt> methods
   * to check if an error occurred while executing.
   * <p>
   * If the value returned is anything other than 0 then one of the
   * methods calls failed.
   * <p>
   * <strong>Note</strong> the error returned is not automatically cleared. To
   * clear the error call {@link org.iotivity.OCRep#clearCborErrno()}
   *
   * @return error, any value other than 0 means an error has occurred
   *
   * @see org.iotivity.OCRep#clearCborErrno()
   */
  public static int getCborErrno() {
    return OCRepJNI.getCborErrno();
  }

  /**
   * clear the cbor error number back to 0
   *
   * @see org.iotivity.OCRep#getCborErrno()
   */
  public static void clearCborErrno() {
    OCRepJNI.clearCborErrno();
  }

  /**
   * Read a long integer from an <tt>OCRepresentation</tt>
   * <p>
   * Example:
   * <pre>
   *     Long ultimate_answer_out = OCRep.getLong(rep, "ultimat_answer");
   *     if (outValue != null) {
   *       System.out.println("The ultimate answer is : " +
   *                           ultimate_answer_out.longValue());
   *     }
   * </pre>
   *
   * @param rep the OCRepresentation to read the long value from
   * @param key the key name for the long integer value
   * 
   * @return the Long value, or null if key or value is not found
   * 
   * @see org.iotivity.OCRep#setLong(org.iotivity.CborEncoder, String, long)
   */
  public static Long getLong(OCRepresentation rep, String key) {
  return OCRepJNI.getLong(OCRepresentation.getCPtr(rep), rep, key);
}

  /**
   * Read a boolean value from an <tt>OCRepresentation</tt>
   * <p>
   * Example:
   * <pre>
   *     bool door_open_flag = false;
   *     Boolean doorOpen = OCRep.getBoolean(rep, "door_open_flag");
   *     if( null != doorOpen ) {
   *       System.out.println("The door is open : " +  doorOpen);
   *     }
   * </pre>
   *
   * @param rep the OCRepresentation to read the boolean value from
   * @param key the key name for the boolean value
   *
   * @return the Boolean value, or null if key or value is not found
   *
   * @see org.iotivity.OCRep#setBoolean(org.iotivity.CborEncoder, String, boolean)
   */
  public static Boolean getBoolean(OCRepresentation rep, String key) {
  return OCRepJNI.getBoolean(OCRepresentation.getCPtr(rep), rep, key);
}

    /**
   * Read a double value from an <tt>OCRepresentation</tt>
   * <p>
   * Example:
   * <pre>
   *     Double pi_out = OCRep.getDouble(rep, "pi");
   *     if( pi_out != null) {
   *         System.out.println("The the value for 'pi' is : " + pi_out);
   *     }
   * </pre>
   *
   * @param rep the OCRepresentation to read the double value from
   * @param key the key name for the double value
   *
   * @return the Double value, or null if key or value is not found
   *
   * @see org.iotivity.OCRep#setDouble(org.iotivity.CborEncoder, String, double)
   */
  public static Double getDouble(OCRepresentation rep, String key) {
  return OCRepJNI.getDouble(OCRepresentation.getCPtr(rep), rep, key);
}

  /**
   * Read a byte string value from an <tt>OCRepresentation</tt>
   * <p>
   * Example:
   * <pre>
   *     byte byteStringOut[] = OCRep.getByteString(rep, "byte_string_key");
   *     if( null != byteStringOut) {
   *         // byte_string_out can be used
   *     }
   * </pre>
   *
   * @param rep the OCRepresentation to read byte string value from
   * @param key the key name for the byte string value
   *
   * @return the byte array, or null if key or value is not found
   *
   * @see org.iotivity.OCRep#setByteString(org.iotivity.CborEncoder, String, byte[])
   */
  public static byte[] getByteString(OCRepresentation rep, String key) {
  return OCRepJNI.getByteString(OCRepresentation.getCPtr(rep), rep, key);
}

  /**
   * Read a text string value from an <tt>OCRepresentation</tt>
   * <p>
   * Example:
   * <pre>
   *     String greetingOut = OCRep.getString(rep, "greeting");
   *     if( null != greetingOut )
   *     {
   *       System.out.println(greetingOut);
   *     }
   * </pre>
   *
   * @param rep the OCRepresentation to read string value from
   * @param key the key name for the string value
   * 
   * @return the string, or null if key or value is not found
   *
   * @see org.iotivity.OCRep#setTextString(org.iotivity.CborEncoder, String, String)
   */
  public static String getString(OCRepresentation rep, String key) {
    return OCRepJNI.getString(OCRepresentation.getCPtr(rep), rep, key);
  }

  /**
   * Read an long integer array value from an <tt>OCRepresentation</tt>
   * <p>
   * Example:
   * <pre>
   *     long fibOut[] = OCRep.getLongArray(rep, "fibonacci");
   *     if( null != fibOut) {
   *         // the fibOut array can now be used
   *     }
   * </pre>
   *
   * @param rep OCRepresentation to read the integer array value from
   * @param key the key name for the integer array value
   *
   * @return an long integer array, or null if key or value is not found
   * 
   * @see org.iotivity.OCRep#setLongArray(org.iotivity.CborEncoder, String, long[])
   */
  public static long[] getLongArray(OCRepresentation rep, String key) {
  return OCRepJNI.getLongArray(OCRepresentation.getCPtr(rep), rep, key);
}

  /**
   * Read an boolean array value from an <tt>OCRepresentation</tt>
   * <p>
   * Example:
   * <pre>
   *     boolean flipOut[] = OCRep.getBooleanArray(rep, "flip");
   *     if( null != flipOut) {
   *         // flipOut can now be used
   *     }
   * </pre>
   *
   * @param rep OCRepresentation to read the boolean array value from
   * @param key the key name for the boolean array value
   *
   * @return a boolean array, or null if key or value is not found
   *
   * @see org.iotivity.OCRep#setBooleanArray(org.iotivity.CborEncoder, String, boolean[])
   */
  public static boolean[] getBooleanArray(OCRepresentation rep, String key) {
  return OCRepJNI.getBooleanArray(OCRepresentation.getCPtr(rep), rep, key);
}

  /**
   * Read an double array value from an <tt>OCRepresentation</tt>
   * <p>
   * Example:
   * <pre>
   *     double mathConstantsOut[] = OCRep.getDoubleArray(rep, "math_constants")
   *     if( null != mathConstantsOut) {
   *         // mathConstantsOut can now be used
   *     }
   * </pre>
   *
   * @param rep OCRepresentation to read the double array value from
   * @param key the key name for the double array value
   *
   * @return a double array, or null if key or value is not found
   */
  public static double[] getDoubleArray(OCRepresentation rep, String key) {
  return OCRepJNI.getDoubleArray(OCRepresentation.getCPtr(rep), rep, key);
}

  /**
   * Read an byte string array value from an <tt>OCRepresentation</tt>
   * <p>
   * Example:
   * <pre>
   *     byte outValue[][] = OCRep.getByteStringArray(rep, "barray");
   *     if( null != outValue ) {
   *       // access outValue like any array of byte arrays
   *     }
   * </pre>
   *
   * @param rep OCRepresentation to read the byte string array value from
   * @param key the key name for the double array value
   *
   * @return an array of byte arrays, or null if key or value is not found
   *
   * @see org.iotivity.OCRep#addByteString(org.iotivity.CborEncoder, byte[])
   */
  public static byte[][] getByteStringArray(OCRepresentation rep, String key) {
  return OCRepJNI.getByteStringArray(OCRepresentation.getCPtr(rep), rep, key);
}

  /**
   * Read a string array value from an <tt>OCRepresentation</tt>
   * <p>
   * Example:
   * <pre>
   *     String quotesOut[] = OCRep.getStringArray(rep, "quotes");
   *     if(null != quotesOut) {
   *         System.out.println("Quotes :");
   *         for (String q : quotesOut) {
   *             System.out.println(q);
   *         }
   *     }
   * </pre>
   *
   * @param rep OCRepresentation to read the string array value from
   * @param key the key name for the double array value
   *
   * @return an array of Strings, or null if key or value is not found
   * 
   * @see org.iotivity.OCRep#setStringArray(org.iotivity.CborEncoder, String, String[])
   */
  public static String[] getStringArray(OCRepresentation rep, String key) {
  return OCRepJNI.getStringArray(OCRepresentation.getCPtr(rep), rep, key);
}

  /**
   * Read a object value from an <tt>OCRepresentation</tt>`
   * <p>
   * Example:
   * <pre>
   *     OCRepresentation myObjectOut = OCRep.getObject(rep, "my_object");
   *     if (null != myObjectOut) {
   *         Long a = OCRep.getLong(myObjectOut, "a");
   *         if (null != a) {
   *             System.out.println("a :" + a);
   *         Boolean b = OCRep.getBoolean(myObjectOut, "b");
   *         if (null != b) {
   *             System.out.println("b :" + b);
   *         String c = OCRep.getString(myObjectOut, "c");
   *         if (null != c) {
   *             System.out.println("c :" + c);
   *     }
   * </pre>
   *
   * @param rep OCRepresentation to read the OCRepresentation object value from
   * @param key the key name for the object value
   *
   * @return the OCRepresentation object, or null if key or value is not found
   *
   * @see org.iotivity.OCRep#beginObject(org.iotivity.CborEncoder)
   * @see org.iotivity.OCRep#endObject(org.iotivity.CborEncoder, org.iotivity.CborEncoder)
   */
  public static OCRepresentation getObject(OCRepresentation rep, String key) {
    long cPtr = OCRepJNI.getObject(OCRepresentation.getCPtr(rep), rep, key);
    return (cPtr == 0) ? null : new OCRepresentation(cPtr, false);
  }

  /**
   * Read an object array value from an <tt>OCRepresentation</tt>
   * <p>
   * <strong>Important</strong> Calling the returned value an array is a
   * misnomer.  The value actually returned is a linked list of <tt>OCRepresentation</tt>
   * objects. The linked list must be walked to see each item in the object array.
   * <p>
   * Example:
   * <pre>
   *     OCRepresentation space2001Out = OCRep.getObjectArray(rep, "space_2001");
   *
   *     String nameOut;
   *     String jobOut;
   *     while (null != space2001out) { 
   *         nameOut = OCRep.getString(space2001Out.getValue().getObject(), "name");
   *         jobOut = OCRep.getString(space2001Out.getValue().getObject(), "job");
   *         System.out.println("name : " + nameOut + " Job : " + jobOut);
   *
   *         space2001Out = space2001Out.getNext();
   *     }
   * </pre>
   *
   * @param rep OCRepresentation to read the OCRepresentation array object value from
   * @param key key the key name for the object array value
   *
   * @return the OCRepresentation object array, or null if key or value is not found
   *
   * @see org.iotivity.OCRep#openArray(org.iotivity.CborEncoder, String)
   * @see org.iotivity.OCRep#closeArray(org.iotivity.CborEncoder, org.iotivity.CborEncoder)
   * @see org.iotivity.OCRep#objectArrayBeginItem(org.iotivity.CborEncoder)
   * @see org.iotivity.OCRep#objectArrayEndItem(org.iotivity.CborEncoder, org.iotivity.CborEncoder)
   */
  public static OCRepresentation getObjectArray(OCRepresentation rep, String key) {
    long cPtr = OCRepJNI.getObjectArray(OCRepresentation.getCPtr(rep), rep, key);
    return (cPtr == 0) ? null : new OCRepresentation(cPtr, false);
  }

  public static long[] ocArrayToLongArray(OCArray array) {
  return OCRepJNI.ocArrayToLongArray(OCArray.getCPtr(array), array);
}

  public static boolean[] ocArrayToBooleanArray(OCArray array) {
  return OCRepJNI.ocArrayToBooleanArray(OCArray.getCPtr(array), array);
}

  public static double[] ocArrayToDoubleArray(OCArray array) {
  return OCRepJNI.ocArrayToDoubleArray(OCArray.getCPtr(array), array);
}

  public static String[] ocArrayToStringArray(OCArray array) {
  return OCRepJNI.ocArrayToStringArray(OCArray.getCPtr(array), array);
}

  public static String toJSON(OCRepresentation rep, boolean prettyPrint) {
    return OCRepJNI.toJSON(OCRepresentation.getCPtr(rep), rep, prettyPrint);
  }

  public static void oc_rep_encode_raw(SWIGTYPE_p_unsigned_char data, long len) {
    OCRepJNI.oc_rep_encode_raw(SWIGTYPE_p_unsigned_char.getCPtr(data), len);
  }

}
