/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.iotivity;

/**
   * Main API of IoTivity-lite for client and server.
   * <p>
   * This is the main entry for all server and client related OCF functions.
   */
  public class OCMain {
  public static boolean oc_ri_is_app_resource_valid(OCResource resource) {
    return OCMainJNI.oc_ri_is_app_resource_valid(OCResource.getCPtr(resource), resource);
  }

  public static int mainInit(OCMainInitHandler handler) {
    return OCMainJNI.mainInit(handler);
  }

  public static void mainShutdown() {
    OCMainJNI.mainShutdown();
  }

  public static void setFactoryPresetsHandler(OCFactoryPresetsHandler cb) {
    OCMainJNI.setFactoryPresetsHandler(cb);
  }

  public static int addDevice(String uri, String rt, String name, String spec_version, String data_model_version) {
    return OCMainJNI.addDevice__SWIG_0(uri, rt, name, spec_version, data_model_version);
  }

  public static int addDevice(String uri, String rt, String name, String spec_version, String data_model_version, OCAddDeviceHandler add_device_cb) {
    return OCMainJNI.addDevice__SWIG_1(uri, rt, name, spec_version, data_model_version, add_device_cb);
  }

  public static int initPlatform(String mfg_name) {
    return OCMainJNI.initPlatform__SWIG_0(mfg_name);
  }

  public static int initPlatform(String mfg_name, OCInitPlatformHandler init_platform_cb) {
    return OCMainJNI.initPlatform__SWIG_1(mfg_name, init_platform_cb);
  }

  public static void setRandomPinHandler(OCRandomPinHandler cb) {
    OCMainJNI.setRandomPinHandler(cb);
  }

  public static void reset() {
    OCMainJNI.reset();
  }

  public static void resetDevice(long device) {
    OCMainJNI.resetDevice(device);
  }

  /**
   * Add handler that is invoked when the doxm 'owned' property is changed
   *
   * If OCMain.addOwnershipStatusHandler is called before OCMain.init or inside
   * one of the OCMainInitHandler callbacks, the OCOwnershipStatusHandler.handler
   * will be invoked when the stack is initilized giving the startup ownership
   * value. If called after OCMain.init the OCOwnershipStatusHandler.handler will
   * not be invoked for the startup ownership value.
   *
   * Use of this method requires using the stack with security enabled.
   *
   * @param cb OCOwnershipStatusHandler class that will be invoked
   */
  public static void addOwnershipStatusHandler(OCOwnershipStatusHandler cb) {
    OCMainJNI.addOwnershipStatusHandler(cb);
  }

  /**
   * Remove the ownership changed handler
   *
   * Use of this method requires using the stack with security enabled.
   *
   * @param cb OCOwnershipStatusHandler class to remove
   */
  public static void removeOwnershipStatusHandler(Object cb) {
    OCMainJNI.removeOwnershipStatusHandler(cb);
  }

  public static void resourceMakePublic(OCResource resource) {
    OCMainJNI.resourceMakePublic(OCResource.getCPtr(resource), resource);
  }

  public static void resourceSetRequestHandler(OCResource resource, OCMethod method, OCRequestHandler callback) {
    OCMainJNI.resourceSetRequestHandler(OCResource.getCPtr(resource), resource, method.swigValue(), callback);
  }

  public static void resourceSetPropertiesHandlers(OCResource resource, OCGetPropertiesHandler getPropertiesHandler, OCSetPropertiesHandler setPropertiesHandler) {
    OCMainJNI.resourceSetPropertiesHandlers(OCResource.getCPtr(resource), resource, getPropertiesHandler, setPropertiesHandler);
  }

  public static boolean deleteResource(OCResource resource) {
    return OCMainJNI.deleteResource(OCResource.getCPtr(resource), resource);
  }

  public static java.util.List<OCQueryValue> getQueryValues(OCRequest request) {
    return OCMainJNI.getQueryValues(OCRequest.getCPtr(request), request);
  }

  public static boolean doSiteLocalIPv6Discovery(String rt, OCDiscoveryHandler handler) {
    return OCMainJNI.doSiteLocalIPv6Discovery(rt, handler);
  }

  public static boolean doSiteLocalIPv6DiscoveryAll(OCDiscoveryAllHandler handler) {
    return OCMainJNI.doSiteLocalIPv6DiscoveryAll(handler);
  }

  public static boolean doRealmLocalIPv6Discovery(String rt, OCDiscoveryHandler handler) {
    return OCMainJNI.doRealmLocalIPv6Discovery(rt, handler);
  }

  public static boolean doRealmLocalIPv6DiscoveryAll(OCDiscoveryAllHandler handler) {
    return OCMainJNI.doRealmLocalIPv6DiscoveryAll(handler);
  }

  public static boolean doIPDiscovery(String rt, OCDiscoveryHandler handler) {
    return OCMainJNI.doIPDiscovery(rt, handler);
  }

  public static boolean doIPDiscoveryAll(OCDiscoveryAllHandler handler) {
    return OCMainJNI.doIPDiscoveryAll(handler);
  }

  /**
   * Discover resources in specific endpoint.
   * <p>
   * The callback handler and endpoint <strong>must not</strong> be null.
   * @param  rt         Resource type query to discover
   * @param  handler    The callback handler for discovered resources
   * @param  endpoint   Endpoint at which to discover resources
   *
   * @return Returns true if it successfully makes and dispatches a coap packet.
   */
  public static boolean doIPDiscoveryAtEndpoint(String rt, OCDiscoveryHandler handler, OCEndpoint endpoint) {
    return OCMainJNI.doIPDiscoveryAtEndpoint(rt, handler, OCEndpoint.getCPtr(endpoint), endpoint);
  }

  public static boolean doIPDiscoveryAllAtEndpoint(OCDiscoveryAllHandler handler, OCEndpoint endpoint) {
    return OCMainJNI.doIPDiscoveryAllAtEndpoint(handler, OCEndpoint.getCPtr(endpoint), endpoint);
  }

  public static boolean doGet(String uri, OCEndpoint endpoint, String query, OCResponseHandler handler, OCQos qos) {
    return OCMainJNI.doGet(uri, OCEndpoint.getCPtr(endpoint), endpoint, query, handler, qos.swigValue());
  }

  public static boolean doDelete(String uri, OCEndpoint endpoint, String query, OCResponseHandler handler, OCQos qos) {
    return OCMainJNI.doDelete(uri, OCEndpoint.getCPtr(endpoint), endpoint, query, handler, qos.swigValue());
  }

  public static boolean initPut(String uri, OCEndpoint endpoint, String query, OCResponseHandler handler, OCQos qos) {
    return OCMainJNI.initPut(uri, OCEndpoint.getCPtr(endpoint), endpoint, query, handler, qos.swigValue());
  }

  public static boolean doPut() {
    return OCMainJNI.doPut();
  }

  public static boolean initPost(String uri, OCEndpoint endpoint, String query, OCResponseHandler handler, OCQos qos) {
    return OCMainJNI.initPost(uri, OCEndpoint.getCPtr(endpoint), endpoint, query, handler, qos.swigValue());
  }

  public static boolean doPost() {
    return OCMainJNI.doPost();
  }

  public static boolean doObserve(String uri, OCEndpoint endpoint, String query, OCResponseHandler handler, OCQos qos) {
    return OCMainJNI.doObserve(uri, OCEndpoint.getCPtr(endpoint), endpoint, query, handler, qos.swigValue());
  }

  public static boolean stopObserve(String uri, OCEndpoint endpoint) {
    return OCMainJNI.stopObserve(uri, OCEndpoint.getCPtr(endpoint), endpoint);
  }

  public static boolean doRealmLocalIPv6Multicast(String uri, String query, OCResponseHandler handler) {
    return OCMainJNI.doRealmLocalIPv6Multicast(uri, query, handler);
  }

  public static boolean doSiteLocalIPv6Multicast(String uri, String query, OCResponseHandler handler) {
    return OCMainJNI.doSiteLocalIPv6Multicast(uri, query, handler);
  }

  public static boolean doIPMulticast(String uri, String query, OCResponseHandler handler) {
    return OCMainJNI.doIPMulticast(uri, query, handler);
  }

  public static void stopMulticast(OCClientResponse response) {
    OCMainJNI.stopMulticast(OCClientResponse.getCPtr(response), response);
  }

  public static void freeServerEndpoints(OCEndpoint endpoints) {
    OCMainJNI.freeServerEndpoints(OCEndpoint.getCPtr(endpoints), endpoints);
  }

  public static OCRole getAllRoles() {
    long cPtr = OCMainJNI.getAllRoles();
    return (cPtr == 0) ? null : new OCRole(cPtr, false);
  }

  public static boolean assertRole(String role, String authority, OCEndpoint endpoint, OCResponseHandler handler) {
    return OCMainJNI.assertRole(role, authority, OCEndpoint.getCPtr(endpoint), endpoint, handler);
  }

  public static void autoAssertRoles(boolean auto_assert) {
    OCMainJNI.autoAssertRoles(auto_assert);
  }

  public static void assertAllRoles(OCEndpoint endpoint, OCResponseHandler handler) {
    OCMainJNI.assertAllRoles(OCEndpoint.getCPtr(endpoint), endpoint, handler);
  }

  public static boolean sendPing(boolean custody, OCEndpoint endpoint, int timeout_seconds, OCResponseHandler handler) {
    return OCMainJNI.sendPing(custody, OCEndpoint.getCPtr(endpoint), endpoint, timeout_seconds, handler);
  }

  public static void setDelayedHandler(OCTriggerHandler callback, int seconds) {
    OCMainJNI.setDelayedHandler(callback, seconds);
  }

  public static void removeDelayedHandler(OCTriggerHandler callback) {
    OCMainJNI.removeDelayedHandler(callback);
  }

  /**
   * Returns whether the oic.wk.con res is announced.
   *
   * @return true if announced (default) or false if not
   * @see setConResAnnounced
   * @see org.iotivity.OCConWriteHandler
   */
  public static boolean getConResAnnounced() {
    return OCMainJNI.getConResAnnounced();
  }

  /**
   * Sets whether the oic.wk.con res is announced.
   * <p>
   * <strong>Note</strong>: this should be set before invoking OCMain.init().
   *
   * @param announce true to announce (default) or false if not
   *
   * @see getConResAnnounced
   * @see org.iotivity.OCConWriteHandler
   */
  public static void setConResAnnounced(boolean announce) {
    OCMainJNI.setConResAnnounced(announce);
  }

  /**
   * Get the ownership status of the logical device, this is the value of the
   * doxm 'owned' property
   *
   * If OCMain.isOwnedDevice is called before OCMain.init has it will
   * always return false because stack security has not been intialized.
   *
   * Use of this method requires using the stack with security enabled.
   *
   * @param device_index the index of the logical device
   *
   * @return true if the device is owned by an onboarding tool
   */
  public static boolean isOwnedDevice(long device_index) {
    return OCMainJNI.isOwnedDevice(device_index);
  }

  public static OCResource newResource(String name, String uri, short num_resource_types, long device) {
    long cPtr = OCMainJNI.newResource(name, uri, num_resource_types, device);
    return (cPtr == 0) ? null : new OCResource(cPtr, false);
  }

  public static void resourceBindResourceInterface(OCResource resource, int iface_mask) {
    OCMainJNI.resourceBindResourceInterface(OCResource.getCPtr(resource), resource, iface_mask);
  }

  public static void resourceSetDefaultInterface(OCResource resource, int iface_mask) {
    OCMainJNI.resourceSetDefaultInterface(OCResource.getCPtr(resource), resource, iface_mask);
  }

  public static void resourceBindResourceType(OCResource resource, String type) {
    OCMainJNI.resourceBindResourceType(OCResource.getCPtr(resource), resource, type);
  }

  public static void deviceBindResourceType(long device, String type) {
    OCMainJNI.deviceBindResourceType(device, type);
  }

  public static void resourceTagPositionDescription(OCResource resource, OCPositionDescription pos) {
    OCMainJNI.resourceTagPositionDescription(OCResource.getCPtr(resource), resource, pos.swigValue());
  }

  public static void resourceTagPositionRelative(OCResource resource, double x, double y, double z) {
    OCMainJNI.resourceTagPositionRelative(OCResource.getCPtr(resource), resource, x, y, z);
  }

  public static void resourceTagFunctionDescription(OCResource resource, OCEnum func) {
    OCMainJNI.resourceTagFunctionDescription(OCResource.getCPtr(resource), resource, func.swigValue());
  }

  public static void processBaselineInterface(OCResource resource) {
    OCMainJNI.processBaselineInterface(OCResource.getCPtr(resource), resource);
  }

  /**
   * Creates a new empty collection.
   * <p>
   * The collection is created with interfaces `oic.if.baseline`,
   * `oic.if.ll` (also default) and `oic.if.b`. Initially it is neither
   * discoverable nor observable.
   * <p>
   * The function only allocates the collection. Use addCollection() after the
   * setup of the collection is complete.
   *
   * @param name name of the collection
   * @param uri Unique URI of this collection. Must not be NULL
   * @param num_resource_types Number of resources the caller will bind with this resource
   *                           (e.g. by invoking resourceBindResourceType(col, OIC_WK_COLLECTION)).
   *                           Must be 1 or higher
   * @param device The internal device that should carry this collection. This is typically 0
   * @return the new collection or NULL if out of memory.
   * @see addCollection
   * @see collectionAddLink
   */
  public static OCResource newCollection(String name, String uri, short num_resource_types, long device) {
    long cPtr = OCMainJNI.newCollection__SWIG_1(name, uri, num_resource_types, device);
    return (cPtr == 0) ? null : new OCResource(cPtr, false);
  }

  /**
   * Deletes the specified collection.
   * <p>
   * The function removes the collection from the internal list of collections
   * and releases all direct resources and links associated with this collection.
   * <p>
   * Note: The function does not delete the resources set in the links.
   *  The caller needs to do this on their own in case these are
   *  no longer required.
   *
   * @param collection The pointer to the collection to delete.
   *                   If this is NULL, the function does nothing
   *
   * @see collectionGetLinks
   * @see deleteLink
   */
  public static void deleteCollection(OCResource collection) {
    OCMainJNI.deleteCollection(OCResource.getCPtr(collection), collection);
  }

  /**
   * Creates a new link for collections with the specified resource.
   *
   * @param resource Resource to set in the link. The resource is not copied.
   *  Must not be NULL
   *
   * @return The created link or NULL if out of memory or resource is NULL.
   *
   * @see deleteLink
   * @see collectionAddLink
   * @see newResource
   */
  public static OCLink newLink(OCResource resource) {
    long cPtr = OCMainJNI.newLink(OCResource.getCPtr(resource), resource);
    return (cPtr == 0) ? null : new OCLink(cPtr, false);
  }

  /**
   * Deletes the link.
   * <p>
   * <strong>Note</strong>: the function neither removes the resource set on this link
   *  nor does it remove it from any collection.
   *
   * @param link The link to delete. The function does nothing, if
   *  the parameter is NULL
   */
  public static void deleteLink(OCLink link) {
    OCMainJNI.deleteLink(OCLink.getCPtr(link), link);
  }

  /**
   * Adds a relation to the link.
   *
   * @param link Link to add the relation to. Must not be null
   * @param rel Relation to add. Must not be null
   */
  public static void linkAddRelation(OCLink link, String rel) {
    OCMainJNI.linkAddRelation(OCLink.getCPtr(link), link, rel);
  }

  /**
   * Adds a link parameter with specified key and value.
   *
   * @param link Link to which to add a link parameter. Must not be null.
   * @param key Key to identify the link parameter. Must not be null.
   * @param value Link parameter value. Must not be null.
   */
  public static void linkAddLinkParameter(OCLink link, String key, String value) {
    OCMainJNI.linkAddLinkParameter(OCLink.getCPtr(link), link, key, value);
  }

  /**
   * Adds the link to the collection.
   * <p>
   * The collection and link must not be null.
   * <p>
   * The link is not copied. The link Must not be added again to this or a
   * different collection; this will cause a list corruption to occur. To re-add
   * a link, remove the link first.
   *
   * @param collection Collection to add the link to. Must not be NULL.
   * @param link Link to add to the collection 
   *
   * @see newLink
   * @see collectionRemoveLink
   */
  public static void collectionAddLink(OCResource collection, OCLink link) {
    OCMainJNI.collectionAddLink(OCResource.getCPtr(collection), collection, OCLink.getCPtr(link), link);
  }

  /**
   * Removes a link from the collection.
   * <p>
   * Does nothing if the collection or link is null.
   * <p>
   * Does nothing if the link is not part of the collection.
   * <p>
   * @param collection Collection to remove the link from
   * @param link The link to remove
   */
  public static void collectionRemoveLink(OCResource collection, OCLink link) {
    OCMainJNI.collectionRemoveLink(OCResource.getCPtr(collection), collection, OCLink.getCPtr(link), link);
  }

  /**
   * Returns the list of links belonging to this collection.
   *
   * @param collection Collection to get the links from.
   *
   * @return All links of this collection. The links are not copied. Returns
   *  null if the collection is null or contains no links.
   *
   * @see collectionAddLink
   */
  public static OCLink collectionGetLinks(OCResource collection) {
    long cPtr = OCMainJNI.collectionGetLinks(OCResource.getCPtr(collection), collection);
    return (cPtr == 0) ? null : new OCLink(cPtr, false);
  }

  /**
   * Adds a collection to the list of collections.
   * <p>
   * If the caller makes the collection discoverable, then it will
   * be included in the collection discovery once it has been added
   * with this function.
   * <p>
   * The collection must not be null. Must not be added twice or a list corruption
   * will occur. The collection is not copied.
   *
   * @param collection Collection to add to the list of collections
   *
   * @see resourceSetDiscoverable
   * @see newCollection
   */
  public static void addCollection(OCResource collection) {
    OCMainJNI.addCollection(OCResource.getCPtr(collection), collection);
  }

  /**
   * Gets all known collections.
   *
   * @return All collections that have been added via addCollection(). The
   * collections are not copied.  Returns null if there are no collections.
   * Collections created using newCollection() but not added will not be
   * returned by this method.
   */
  public static OCResource collectionGetCollections() {
    long cPtr = OCMainJNI.collectionGetCollections();
    return (cPtr == 0) ? null : new OCResource(cPtr, false);
  }

  public static boolean collectionAddSupportedResourceType(OCResource collection, String rt) {
    return OCMainJNI.collectionAddSupportedResourceType(OCResource.getCPtr(collection), collection, rt);
  }

  public static boolean collectionAddMandatoryResourceType(OCResource collection, String rt) {
    return OCMainJNI.collectionAddMandatoryResourceType(OCResource.getCPtr(collection), collection, rt);
  }

  public static void resourceSetDiscoverable(OCResource resource, boolean state) {
    OCMainJNI.resourceSetDiscoverable(OCResource.getCPtr(resource), resource, state);
  }

  public static void resourceSetObservable(OCResource resource, boolean state) {
    OCMainJNI.resourceSetObservable(OCResource.getCPtr(resource), resource, state);
  }

  public static void resourceSetPeriodicObservable(OCResource resource, int seconds) {
    OCMainJNI.resourceSetPeriodicObservable(OCResource.getCPtr(resource), resource, seconds);
  }

  public static void oc_resource_set_secure_mcast(OCResource resource, boolean supported) {
    OCMainJNI.oc_resource_set_secure_mcast(OCResource.getCPtr(resource), resource, supported);
  }

  public static boolean addResource(OCResource resource) {
    return OCMainJNI.addResource(OCResource.getCPtr(resource), resource);
  }

  public static void oc_delayed_delete_resource(OCResource resource) {
    OCMainJNI.oc_delayed_delete_resource(OCResource.getCPtr(resource), resource);
  }

  /**
   * Sets the callback handler to receive change notifications for
   * the oic.wk.con resource.
   * <p>
   * The method can be used to set or unset the callback handler.
   * Whenever an attribute of the oic.wk.con resource is changed,
   * the callback will be invoked.
   * <p>
   * If the method is invoked a second time, then the previously set callback
   * handler is replaced.
   *
   * @param callback The callback handler to register or null to unset it
   */
  public static void setConWriteHandler(OCConWriteHandler callback) {
    OCMainJNI.setConWriteHandler(callback);
  }

  public static void sendResponse(OCRequest request, OCStatus response_code) {
    OCMainJNI.sendResponse(OCRequest.getCPtr(request), request, response_code.swigValue());
  }

  public static boolean oc_get_request_payload_raw(OCRequest request, SWIGTYPE_p_p_unsigned_char payload, SWIGTYPE_p_size_t size, SWIGTYPE_p_oc_content_format_t content_format) {
    return OCMainJNI.oc_get_request_payload_raw(OCRequest.getCPtr(request), request, SWIGTYPE_p_p_unsigned_char.getCPtr(payload), SWIGTYPE_p_size_t.getCPtr(size), SWIGTYPE_p_oc_content_format_t.getCPtr(content_format));
  }

  public static void oc_send_response_raw(OCRequest request, SWIGTYPE_p_unsigned_char payload, long size, oc_content_format_t content_format, OCStatus response_code) {
    OCMainJNI.oc_send_response_raw(OCRequest.getCPtr(request), request, SWIGTYPE_p_unsigned_char.getCPtr(payload), size, content_format.swigValue(), response_code.swigValue());
  }

  public static boolean oc_get_response_payload_raw(OCClientResponse response, SWIGTYPE_p_p_unsigned_char payload, SWIGTYPE_p_size_t size, SWIGTYPE_p_oc_content_format_t content_format) {
    return OCMainJNI.oc_get_response_payload_raw(OCClientResponse.getCPtr(response), response, SWIGTYPE_p_p_unsigned_char.getCPtr(payload), SWIGTYPE_p_size_t.getCPtr(size), SWIGTYPE_p_oc_content_format_t.getCPtr(content_format));
  }

  public static void oc_send_diagnostic_message(OCRequest request, String msg, long msg_len, OCStatus response_code) {
    OCMainJNI.oc_send_diagnostic_message(OCRequest.getCPtr(request), request, msg, msg_len, response_code.swigValue());
  }

  public static boolean oc_get_diagnostic_message(OCClientResponse response, SWIGTYPE_p_p_char msg, SWIGTYPE_p_size_t size) {
    return OCMainJNI.oc_get_diagnostic_message(OCClientResponse.getCPtr(response), response, SWIGTYPE_p_p_char.getCPtr(msg), SWIGTYPE_p_size_t.getCPtr(size));
  }

  public static void ignoreRequest(OCRequest request) {
    OCMainJNI.ignoreRequest(OCRequest.getCPtr(request), request);
  }

  public static void indicateSeparateResponse(OCRequest request, OCSeparateResponse response) {
    OCMainJNI.indicateSeparateResponse(OCRequest.getCPtr(request), request, OCSeparateResponse.getCPtr(response), response);
  }

  public static void setSeparateResponseBuffer(OCSeparateResponse handle) {
    OCMainJNI.setSeparateResponseBuffer(OCSeparateResponse.getCPtr(handle), handle);
  }

  public static void sendSeparateResponse(OCSeparateResponse handle, OCStatus response_code) {
    OCMainJNI.sendSeparateResponse(OCSeparateResponse.getCPtr(handle), handle, response_code.swigValue());
  }

  public static int notifyObservers(OCResource resource) {
    return OCMainJNI.notifyObservers(OCResource.getCPtr(resource), resource);
  }

  public static boolean oc_init_multicast_update(String uri, String query) {
    return OCMainJNI.oc_init_multicast_update(uri, query);
  }

  public static boolean oc_do_multicast_update() {
    return OCMainJNI.oc_do_multicast_update();
  }

  public static void closeSession(OCEndpoint endpoint) {
    OCMainJNI.closeSession(OCEndpoint.getCPtr(endpoint), endpoint);
  }

  public static void setImmutableDeviceIdentifier(long device, OCUuid piid) {
    OCMainJNI.setImmutableDeviceIdentifier(device, OCUuid.getCPtr(piid), piid);
  }

}
